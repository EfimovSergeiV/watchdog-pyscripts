""" –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –≤ —Å–µ—Ç–∏ """
import websocket, json, time
from utils.wake_on_lan import send_wol
from utils.mattermost import send_notification

from conf import MATTERMOST_WS, BOT_TOKEN, ACCESS_LIST, SERVER_ID


def on_message(ws, message):
    data = json.loads(message)
    # print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data}")
    if data.get("event") == "posted":
        post_raw = data["data"]["post"]
        post_data = json.loads(post_raw)

        message_text = post_data.get("message")
        sender_name = data["data"].get("sender_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        print(f"üí¨ { sender_name }: { message_text }")

        user = ACCESS_LIST.get(sender_name)

        WORDS = ["–≤–∫–ª", "on", "–≤–∫–ª—é—á–∏", "—Ä–∞–∑–±—É–¥–∏","–≤–∫–ª—é—á–∏—Ç—å", "–∑–∞–ø—É—Å–∫", "wake", "—Å—Ç–∞—Ä—Ç" ]
        if user:
            command = message_text.lower().strip().split()

            first_word = command.pop(0) if command else None
            if len(command) == 0 and first_word in WORDS:
                # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã 1: –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞")
                send_notification(user['channel_id'], f"{ SERVER_ID }: –ü—Ä–æ–±—É—é —Ä–∞–∑–±—É–¥–∏—Ç—å {user['computers'][0]['name']}...")

            elif len(command) >= 1 and first_word in WORDS:
                # –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∏–Ω–¥–µ–∫—Å—É

                # –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
                if command[0].isdigit():
                    computer_index = [int(index) for index in command if index.isdigit()]
                    for computer in computer_index:
                        print(f"COMPUTER: {computer - 1}")
                        watch_comp = user["computers"][computer - 1] if computer - 1 < len(user["computers"]) else None
                        if watch_comp:
                            print(f"–ü—Ä–æ–±—É–∂–¥–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä {watch_comp['name']} ({watch_comp['mac']})")
                            send_notification(user['channel_id'], f"{ SERVER_ID }: –ü—Ä–æ–±—É—é —Ä–∞–∑–±—É–¥–∏—Ç—å {watch_comp['name']}...")
                            send_wol(watch_comp['mac'], watch_comp['broadcast_ip'])
                
                else:
                    # –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
                    for computer_name in command:
                        watch_comp = next((comp for comp in user["computers"] if comp["name"].lower() == computer_name.lower()), None)
                        if watch_comp:
                            print(f"–ü—Ä–æ–±—É–∂–¥–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä {watch_comp['name']} ({watch_comp['mac']})")
                            send_notification(user['channel_id'], f"{ SERVER_ID }: –ü—Ä–æ–±—É—é —Ä–∞–∑–±—É–¥–∏—Ç—å {watch_comp['name']}...")
                            send_wol(watch_comp['mac'], watch_comp['broadcast_ip'])
                        else:
                            print(f"–ö–æ–º–ø—å—é—Ç–µ—Ä —Å –∏–º–µ–Ω–µ–º '{computer_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    else:
        print("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ post):")
        # print(json.dumps(data, indent=2, ensure_ascii=False))


def on_error(ws, error):
    print("‚ùå –û—à–∏–±–∫–∞:", error)


def on_close(ws, close_status_code, close_msg):
    print(f"üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {close_status_code} {close_msg}")


def on_open(ws):
    print("üîì WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, –∂–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–æ–∫–µ–Ω–∞...")
    time.sleep(1)
    payload = {
        "seq": 1,
        "action": "authentication_challenge",
        "data": {
            "token": BOT_TOKEN
        }
    }
    print("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    ws.send(json.dumps(payload))



if __name__ == "__main__":
    websocket.enableTrace(False)

    try:
        while True:
            try:
                ws = websocket.WebSocketApp(
                    MATTERMOST_WS,
                    on_open=on_open,
                    on_message=on_message,
                    on_error=on_error,
                    on_close=on_close
                )
                print("üîÅ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket...")
                ws.run_forever(ping_interval=30, ping_timeout=10)

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket: {e}")

            print("‚è≥ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã...")
            time.sleep(120)

    except KeyboardInterrupt:
        print("‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")