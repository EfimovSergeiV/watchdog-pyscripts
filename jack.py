import websocket, json, time, os, threading
from utils.mattermost import send_notification
from conf import MATTERMOST_WS, BOT_TOKEN, USER_ACCESS


# from utils.sound import sound_func, stop_sound, reset_sound
from utils.sound_images import sound_func, stop_sound, reset_sound


sound_thread = None

def start_sound():
    global sound_thread
    if sound_thread is None or not sound_thread.is_alive():
        print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
        reset_sound()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º Event –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        sound_thread = threading.Thread(target=sound_func)
        sound_thread.start()
    else:
        print("üîÑ –£–∂–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º...")
        send_notification("–£–∂–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–µ–º...")

def stop_sound_thread():
    global sound_thread
    if sound_thread and sound_thread.is_alive():
        print("‚èπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
        stop_sound()
        sound_thread.join(timeout=5)
        # send_notification("–ë–æ–ª—å—à–µ –Ω–µ —Å–ª—É—à–∞—é.") # –î–æ —Å—é–¥–∞ –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç
    else:
        print("üîá –ù–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å.")
        send_notification("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ...")


def on_message(ws, message):
    print("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

    data = json.loads(message)

    if data.get("event") == "posted":
        post_raw = data["data"]["post"]
        post_data = json.loads(post_raw)

        message_text = post_data.get("message", "")
        sender_name = data["data"].get("sender_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

        print(f"üí¨ {sender_name}: {message_text}")

        if sender_name in USER_ACCESS:
            command = message_text.lower().strip()

            if command in ["—Å—Ç–æ–ø", "–æ—Å—Ç–∞–Ω–æ–≤–∏", "–Ω–µ —Å–ª—É—à–∞–π", "–Ω–µ —Å–ª—É—à–∞—Ç—å"]:
                stop_sound()

            elif command in ["—Å—Ç–∞—Ä—Ç", "—Å–ª—É—à–∞–π", "—Å–ª—É—à–∞—Ç—å", "–∑–∞–ø–∏—Å—å", "–Ω–∞—á–∞—Ç—å",]:
                start_sound()

            elif command in ["–≤—ã–∫–ª", "–≤—ã–∫–ª—é—á–∏—Ç—å",]:
                send_notification("–í—ã–∫–ª—é—á–∞–µ–º –º–∏–Ω–∏–∫–æ–º–ø—å—é—Ç–µ—Ä.")
                stop_sound()
                ws.close()
                os.system("shutdown /s /t 1")

            elif command in ["–≤–∫–ª", "–≤–∫–ª—é—á–∏", "—Ä–∞–∑–±—É–¥–∏","–≤–∫–ª—é—á–∏—Ç—å", "–∑–∞–ø—É—Å–∫", "wake", "—Å—Ç–∞—Ä—Ç"]:
                send_notification("–ú–∏–Ω–∏–∫–æ–º–ø—å—é—Ç–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

            else:
                print(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
                send_notification(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: `{command}`")

    else:
        print("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è post:")
        print(json.dumps(data, indent=2, ensure_ascii=False))


def on_error(ws, error):
    print("‚ùå –û—à–∏–±–∫–∞:", error)


def on_close(ws, close_status_code, close_msg):
    print(f"üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {close_status_code} {close_msg}")


def on_open(ws):
    print("üîì WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, –∂–¥—ë–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–æ–∫–µ–Ω–∞...")
    time.sleep(1)
    payload = {
        "seq": 1,
        "action": "authentication_challenge",
        "data": {
            "token": BOT_TOKEN
        }
    }
    print("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    ws.send(json.dumps(payload))


if __name__ == "__main__":
    send_notification("–ú–∏–Ω–∏–∫–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
    websocket.enableTrace(False)
    ws = websocket.WebSocketApp(
        MATTERMOST_WS,
        on_open=on_open,
        on_message=on_message,
        on_error=on_error,
        on_close=on_close
    )
    try:
        ws.run_forever()
    finally:
        stop_sound()