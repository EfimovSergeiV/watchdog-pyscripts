from utils.mattermost import send_notification
from datetime import datetime
import numpy as np
from conf import ABSOLUTE_PATH

import time, os, cv2, pyaudio, wave, threading

_stop_event = threading.Event()



def save_recording(frames, p, FORMAT, CHANNELS, RATE, duration):
    directory = f"{ABSOLUTE_PATH}/recordings"
    os.makedirs(directory, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥, –µ—Å–ª–∏ –Ω–µ—Ç

    filename = datetime.now().strftime("%d-%m-%Y_%H-%M-%S.wav")
    filepath = os.path.join(directory, filename)

    wf = wave.open(filepath, 'wb')
    wf.setnchannels(CHANNELS)
    wf.setsampwidth(p.get_sample_size(FORMAT))
    wf.setframerate(RATE)
    wf.writeframes(b''.join(frames))
    wf.close()

    print(f"üíæ({int(duration)} —Å–µ–∫.) –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
    send_notification(f"({int(duration)} —Å–µ–∫.) –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")


def save_image(frame):
    filename = datetime.now().strftime("%d-%m-%Y_%H-%M-%S.jpg")
    directory = f'{ABSOLUTE_PATH}/photos/{datetime.now().strftime("%d-%m-%Y")}'
    os.makedirs(directory, exist_ok=True)

    filepath = os.path.join(directory, filename)
    cv2.imwrite(filepath, frame)


def sound_func():
    # --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
    THRESHOLD = 15000
    CHUNK = 1024
    FORMAT = pyaudio.paInt16
    CHANNELS = 1
    RATE = 16000
    MINIMUM_LOUD_DURATION = 1   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥—Ä–æ–º–∫–æ–≥–æ –∑–≤—É–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
    SILENCE_TIMEOUT = 8         # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    p = pyaudio.PyAudio()
    stream = p.open(format=FORMAT,
                    channels=CHANNELS,
                    rate=RATE,
                    input=True,
                    frames_per_buffer=CHUNK)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("üö´ –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        cap = None

    print("üéôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å...")
    send_notification("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å...")

    loud_start_time = None      # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≥—Ä–æ–º–∫–æ–≥–æ –∑–≤—É–∫–∞
    record_start_time = None    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏
    recording = False
    frames = []
    silence_timer = None

    try:
        while not _stop_event.is_set():
            data = stream.read(CHUNK, exception_on_overflow=False)
            audio_data = np.frombuffer(data, dtype=np.int16)
            volume = np.linalg.norm(audio_data)

            now = time.time()

            if volume > THRESHOLD:
                if loud_start_time is None:
                    loud_start_time = now

                print(f"–®—É–º–∏–º –≤ —Ç–µ—á–µ–Ω–∏–∏ {now - loud_start_time:.2f} —Å–µ–∫—É–Ω–¥, –≥—Ä–æ–º–∫–æ—Å—Ç—å: {volume:.2f}")

                if not recording and (now - loud_start_time) >= MINIMUM_LOUD_DURATION:
                    print("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–≤—É–∫, –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...")
                    send_notification("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–≤—É–∫, –Ω–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å...")
                    record_start_time = time.time()
                    recording = True
                    frames = []

                    # üí° –°–¥–µ–ª–∞—Ç—å —Å–Ω–∏–º–æ–∫ –∫–∞–º–µ—Ä—ã
                    if cap is not None:
                        ret, frame = cap.read()
                        if ret:
                            save_image(frame)
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã")

                if recording:
                    frames.append(data)
                    silence_timer = now

            else:
                # üîá –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∑–≤—É–∫–∞
                loud_start_time = None

                if recording:
                    frames.append(data)
                    if now - silence_timer > SILENCE_TIMEOUT:
                        duration = time.time() - record_start_time
                        save_recording(frames, p, FORMAT, CHANNELS, RATE, duration)
                        recording = False
                        frames = []

    finally:
        if recording and frames:
            print("‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä—É—á–Ω—É—é...")
            duration = time.time() - record_start_time
            save_recording(frames, p, FORMAT, CHANNELS, RATE, duration)
        stream.stop_stream()
        stream.close()
        p.terminate()
        print("FINALLY: –ü–æ—Ç–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        send_notification("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")


def stop_sound():
    _stop_event.set()


def reset_sound():
    global _stop_event
    _stop_event = threading.Event()